|17.0111.1215|
. Integer - not bigint for now
. Float - just to be there
. String - whole on one line for now
. Quote = [ word word word ]
maybe
. List = (elt elt elt) heterogenous (42 3.14 "string")


* words definition?
  [ dup dup swap ] :word // ? , yeah `dup dup swap` is kinda joke

x stack item has it's type as string for generic isOf(type: String) function
  nope, is_a("Type") uses pattern matching to match with given type

|17.0116.0909|
- Builtins.with_voc(Stack -> Vocabulary (Stack -> StackItem)) 
  returns normal Builtins function Stack->StackItem, but with vocabulary set

- stack:
* [v] dup
* [v] swap
* [v] rot
* [v] -rot
* [v] drop
* [v] over
* [v] pick
* [ ] 2dup
* [ ] 2swap
* [ ] 2over

- stack item:
* [v] type? : type e.g. !String, !Noop, !Int

- math:
* [v] add
* [v] sub
* [v] mult
* [v] idiv
* [v] fdiv
* [v] negate
* [v] round/ceil/floor
* [v] eq/neq/gt/ge/lt/le `NOS gt TOS`
* [v] and/or/xor/not ( -1 (any !=0) - true, 0 - false ) ( 0 not -> -1 )
* [v] random [0...x) Int
* [v] rnd [0...1) Float

- strings:
* [ ] at
* [ ] upcase
* [ ] downcase
* [ ] reverse

- structured
* [v] if: [true-br] [false-br] [cond] if :: -> [cond] [true] [false] if
* [v] when: [true-br] [cond] when :: -> [cond] [true] when
* [v] [ words cond|int ] while - loop while TOS after execution is not zero
* [v] break
* [v] Q n times

* [v] words

- combinators?
* [v] `i` identity
* [ ]`each`: `[el el] [func] each`

* [ ] Parser: ( comment )


* [ ] BigInt much later


|17.0116.1546|
* [v] Vocabulary: change to Map<String, StackItem>
* [x] on definition, make quotes eval atoms to definitions (mainly for builtins), so that
      [print "\n" print] : say -> quote(builtin, string, builtin)

* [ ] "string" ns - set current namespace
  ns? - put on stack current namespace
  default is "Main"
* [ ] Vocabulary entries are : "<ns>:<word>"

|17.0118.1435|
* [ ] Prelude.kn file with common functions, that 'not builtins'


main objectives:
. InputStream (inst'ed via Lexer)
. Lexer
. Parser
. Interpretation
. Multi-line quotes definition ?
  e.g.
  > [ word word
  |   word word word ]
  ok
  >
. 'ok's ?



OLD
===
. Interpreter (for now at least)
. BigInt for integer ?
. Float
. Bool
. String (interpolation??) - double quoted
. List? Array? Map?
. Quote == lambda (delayed execution) [ quote ]

. Loops (for? while?)
. Conditinos (if?)
. vars? (def)
. words? (def)
