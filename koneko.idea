|17.0111.1215|
. Integer - not bigint for now
. Float - just to be there
. String - whole on one line for now
. Quote = [ word word word ]
maybe
. List = (elt elt elt) heterogenous (42 3.14 "string")


* words definition?
  [ dup dup swap ] :word // ? , yeah `dup dup swap` is kinda joke

x stack item has it's type as string for generic isOf(type: String) function
  nope, is_a("Type") uses pattern matching to match with given type

|17.0116.0909|
- Builtins.with_voc(Stack -> Vocabulary (Stack -> StackItem)) 
  returns normal Builtins function Stack->StackItem, but with vocabulary set

- stack:
* [v] dup
* [v] swap
* [v] rot
* [v] -rot
* [v] drop
* [v] over
* [v] pick
* [ ] 2dup
* [ ] 2swap
* [ ] 2over

- stack item:
* [v] type? : type e.g. !String, !Noop, !Int

- math:
* [v] add
* [v] sub
* [v] mult
* [v] idiv
* [v] fdiv
* [v] negate
* [v] round/ceil/floor
* [v] eq/neq/gt/ge/lt/le `NOS gt TOS`
* [v] and/or/xor/not ( -1 (any !=0) - true, 0 - false ) ( 0 not -> -1 )
* [v] random [0...x) Int
* [v] rnd [0...1) Float

- strings:
* [v] S N at
* [ ] S upcase
* [ ] S downcase
* [ ] S backwards
* [ ] S N N substr (string pos len)

- structured
* [v] if: [true-br] [false-br] [cond] if :: -> [cond] [true] [false] if
* [v] when: [true-br] [cond] when :: -> [cond] [true] when
* [v] [ words cond|int ] while - loop while TOS after execution is not zero
* [v] break (exits current eval loop, be it inside a quote or toplevel)
* [v] Q n times

* [v] words

* [v] N quote - turns N values on stack into quote: 1 2 3 3 quote -> [1 2 3]
* [v] unquote - turns quote on stack to sequence of values on stack: [1 2 3] -> 1 2 3
* [v] >q, q<, <q, q> - unshift to quote, push to quote, shift from quote, pop from quote
* [v] Q reverse : [ 1 2 3 ] -> [ 3 2 1 ]

* [v] definition via `:` and `is!`
* [v] careful definition via `is` (does not bind word if it already has value)

* [v] args ( - Q(args) ) : Sys.args();
* [v] read-line ( - S(line) )

- combinators?
* [v] `i` identity
* [ ] `each`: `[el el] [func] each`

* [v] assert : `break`s on false on stack
* [v] S assert-type : `break`s on wrong type
* [v] S assert/msg : same as assert, but prints S message on false

* [v] .sl, .tl - stack length and temp stack length

* [ ] BigInt much later


|17.0116.1546|
* [v] Vocabulary: change to Map<String, StackItem>

* [v] "string" ns - set current namespace
  [v] ns? - put on stack current namespace
  default is "Main"
* [v] Vocabulary entries are : "<ns>:<word>"

|17.0118.1435|
* [v] Prelude.kn file with common functions, that 'not builtins'
  + true, false, 2dup, 2over, 2swap

|17.0119.1426|
* [v] additional stack for holding temporary values : stack.tmp
* [v] >t, <t, .t - builtins for manipulating temporary stack
     e.g. 2over w/ .t : [ >t rot <t ] is 2over
* [v] Parser: ( comment )


main objectives:
. [v] InputStream (inst'ed via Lexer)
. [v] Lexer
. [v] Parser
. [v] Interpretation
. [ ] Multi-line quotes definition ?
  e.g.
  > [ word word
  |   word word word ]
  ok
  >
. [x] 'ok's ?
