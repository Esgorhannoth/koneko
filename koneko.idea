|17.0111.1215|
. Integer - not bigint for now
. Float - just to be there
. String - whole on one line for now
. Quote = [ word word word ]
maybe
. List = (elt elt elt) heterogenous (42 3.14 "string")


* words definition?
  [ dup dup swap ] :word // ? , yeah `dup dup swap` is kinda joke

x stack item has it's type as string for generic isOf(type: String) function
  nope, is_a("Type") uses pattern matching to match with given type

|17.0116.0909|
- Builtins.with_voc(Stack -> Vocabulary (Stack -> StackItem)) 
  returns normal Builtins function Stack->StackItem, but with vocabulary set

- stack:
* [v] dup
* [v] swap
* [ ] rot
* [ ] -rot
* [v] drop
* [ ] over

- stack item:
* [ ] type? : type e.g. !String, !Noop, !Int

- math:
* [v] add
* [ ] sub
* [ ] mult
* [ ] idiv
* [ ] fdiv
* [ ] negate
* [ ] round/ceil/floor
* [ ] eq/neq/gt/ge/lt/le `NOS gt TOS`
* [ ] and/or/xor/not ( 1 (any !=0) - true, 0 - false ) ( 0 not -> 1 )

- strings:
* [ ] at
* [ ] upcase
* [ ] downcase
* [ ] reverse

- structured
* [ ] if: [true-br] [false-br] [cond] if
* [ ] while ???

- combinators?
* [ ] `i` identity
* [ ]`each`: `[el el] [func] each`


main objectives:
. InputStream (inst'ed via Lexer)
. Lexer
. Parser
. Interpretation
. Multi-line quotes definition ?
  e.g.
  > [ word word
  |   word word word ]
  ok
  >
. 'ok's ?



OLD
===
. Interpreter (for now at least)
. BigInt for integer ?
. Float
. Bool
. String (interpolation??) - double quoted
. List? Array? Map?
. Quote == lambda (delayed execution) [ quote ]

. Loops (for? while?)
. Conditinos (if?)
. vars? (def)
. words? (def)
